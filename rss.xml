<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Vishal Naik]]></title><description><![CDATA[Co-Founder @ doctorsbazaar, Technical consultant for startups, All things tech and product.]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 08 Jan 2021 04:19:25 GMT</lastBuildDate><item><title><![CDATA[Types of Technical Debt]]></title><description><![CDATA[Understanding the taxonomy of technical debt can help anticipate and plan before last due date.]]></description><link>https://lumen.netlify.com/posts/types-of-technical-debt</link><guid isPermaLink="false">https://lumen.netlify.com/posts/types-of-technical-debt</guid><pubDate>Sun, 03 Jan 2021 18:40:32 GMT</pubDate><content:encoded>&lt;p&gt;Technical Debt is a phrase that is most often used to refer to shortcomings in the software from a technical perspective.&lt;/p&gt;
&lt;p&gt;The metaphor is attributed to Ward Cunningham, &lt;a href=&quot;http://wiki.c2.com/?WardExplainsDebtMetaphor&quot;&gt;who explained it as&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The explanation I gave to my boss, and this was financial software, was a financial analogy I called “the debt metaphor”. And that said that if we failed to make our program align with what we then understood to be the proper way to think about our financial objects, then we were gonna continually stumble over that disagreement and that would slow us down which was like paying interest on a loan.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While technical debt is most often used to refer to the design and code quality issues, it also has a broader applicability and being aware of the different types of debt can help plan and prioritize.&lt;/p&gt;
&lt;h2&gt;Types of Technical Debt&lt;/h2&gt;
&lt;h3&gt;Quality of Code Debt&lt;/h3&gt;
&lt;p&gt;Most of the usage of the term technical debt refers to issues with code quality.
Below are some of the things that drags down quality of code:&lt;/p&gt;
&lt;h4&gt;Examples:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code Smells&lt;/p&gt;
&lt;p&gt;These are the “Code Smells” listed exhaustively in the &lt;a href=&quot;https://martinfowler.com/books/refactoring.html&quot;&gt;Refactoring&lt;/a&gt; book. Smelly code is not just an eye sore for anyone who reads it but is akin to a high amp resistor to enhance features on top of, besides being a source of defects and an anchor for developer morale.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Duplication of business logic&lt;/p&gt;
&lt;p&gt;Most often done for a “quick and dirty” fix but also can be caused by lack of context with the developer. &lt;/p&gt;
&lt;p&gt;Business logic duplication often creates a whack-a-mole pattern of defects where each fix introduces an inconsitency in behaviour from its duplicates.&lt;/p&gt;
&lt;p&gt;Not all duplication incurs the same cost. E.g. Duplicating business logic like tax calculation in an invoicing module can be very costly since it can be source of bugs, whereas duplication of a small utility method although imperfect is not a big deal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hardcoding instead of driving by config&lt;/p&gt;
&lt;p&gt;For e.g. using a custom logic against a customer identity to meet their immediate requirements.&lt;/p&gt;
&lt;p&gt;Often used for quick fixes or implemented for proof of concept but if not attended to, can languish and affect maintainability as the customer base grows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lack Of Tests&lt;/p&gt;
&lt;p&gt;Test coverage is what gives confidence to change code and lack of sufficient coverage, atleast in the important workflows of the code is a huge debt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hard to Read&lt;/p&gt;
&lt;p&gt;How easy is it for a new developer to understand a piece of code and relate it to business understanding? Does the code convey the intent properly? &lt;/p&gt;
&lt;p&gt;Is complex domain logic encapsulated using Domain Driven Design?&lt;/p&gt;
&lt;p&gt;Is the code organized in a structured manner around modules?&lt;/p&gt;
&lt;p&gt;How much of tribal knowledge is required for a new team member to make a low complexity change on their first week of work?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lack of Observability&lt;/p&gt;
&lt;p&gt;Are you able to observe what the system is doing in a production environment?&lt;/p&gt;
&lt;p&gt;Lack of logging in the code, lack of auditing user actions can severely impede maintainability and slow down resolution of customer issues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Improving Code Quality&lt;/h4&gt;
&lt;p&gt;Code quality related issues become apparent once an application is in production and being enhanced. This can be visible in terms of defects or customer support tickets or unusally long times to make small changes.&lt;/p&gt;
&lt;p&gt;Code quality issues can be budgeted whenever there is a change in the related area either to fix a defect or to enhance a business logic. For e.g. in a story or a ticket to enhance a feature, the team can also highlight the issues with the code that needs to be addressed.&lt;/p&gt;
&lt;p&gt;Observability issues must be fixed as and when they are detected. &lt;/p&gt;
&lt;p&gt;Automated code quality checks like PMD in java or Rubocop in Rails or JSLint in Javascript can help surface issues during development and can be a developer aid apart from code reviews.
However, quality of code is a function of the level of the craftsmanship on the team. &lt;/p&gt;
&lt;p&gt;Besides pairing, doing refactoring workshops, &lt;a href=&quot;https://martinfowler.com/books/refactoring.html&quot;&gt;Refactoring&lt;/a&gt; book reading, DHH’s set of videos on &lt;a href=&quot;https://www.youtube.com/watch?v=wXaC0YvDgIo&amp;#x26;list=PL9wALaIpe0Py6E_oHCgTrD6FvFETwJLlx&quot;&gt;“Writing software well”&lt;/a&gt; have helped me to impress the importance of code quality and drive changes especially for new developers and teams that have been very tactical while coding.&lt;/p&gt;
&lt;h3&gt;Abstraction Debt&lt;/h3&gt;
&lt;p&gt;The primarily leverage in software or a machine versus doing something manually is the ability to build abstractions so that the same thing can be used as many times in different contexts. &lt;/p&gt;
&lt;p&gt;Consider a hardware fastenter like a nut and bolt. This primitive can be used to join parts together and is a fundamental building block in artifacts. This can be used to build tools which is then used to build even complex tools.&lt;/p&gt;
&lt;p&gt;Likewise, software is composed using multiple primitives, which leads to a complex building block on top of which more complex things can be built.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well written software recognizes commonality of requirements and abstracts behaviour and concepts to provide the right primitives and abstractions on which more complex behaviours can be built.
Poorly written software often is a big ball of mud with rote code used to do the same things in different places and reveals itself when even small changes require a lot of effort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example - not using a layered design and making things reusable. Consider a shopping cart application. An order can be created from multiple sources - cart, special offer, subscription, external API etc. Well structured code will have a single internal API to create an order from different sources and not have multiple APIs for the same.&lt;/p&gt;
&lt;p&gt;In a consulting engagement, working with an enterprise SaaS application, the reporting module did not have any abstraction for basic things like server-side pagination and filtering or role based filters. Each new report would get hand coded in its own way and over time the report count grew to over a 100. In the early stages of that enterprise product, there was not much data and this was passable. But as the data began to grow, performance issues due to lack of server side pagination revealed itself and these reports had to be re-written from the ground up.&lt;/p&gt;
&lt;p&gt;Modern application frameworks like Spring Boot, Django, Rails already take care of providing web app primitives for HTTP request routing, database access, file storage, emails etc. But any non-trivial application will need custom abstractions to create leverage in software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deferred abstractions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;However, an abstraction can be deferred until there is better clarity on requirements and use cases or until the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cost_of_delay&quot;&gt;cost of delay&lt;/a&gt; is not viable. &lt;/p&gt;
&lt;p&gt;Let’s say in an enterprise product, each customer has complex data processing rules.  Not having an abstraction like a DSL or configurability in the rules is a debt because ability to express these rules easily is a much needed abstraction here. However, if the complexities and future needs can’t be anticipated at the early stage with the first few customers, it might make sense to implement them using custom code for each customer without building a custom DSL or using a rule engine.
Here you are trying to avoid the cost of the wrong abstraction which can be much higher than the benefit.&lt;/p&gt;
&lt;p&gt;A feature debt can also be a cause of the missing abstraction. Consider an example where each customer for enterprise product expects a custom invoice template. An Invoice Template Builder UI is ideal but depending on the product and the number of customers, this can be deferred and instead built as custom template per customer if there are more important features to focus on until it becomes a pain point. Here, the cost of delay is an important metric to measure if this should be done.&lt;/p&gt;
&lt;p&gt;Missing abstractions are usually due to lack of tech leadership in the team. &lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abstractions provide the primary leverage in software development. Developers must constantly evaluate when something needs to be abstracted at the time of development.&lt;/li&gt;
&lt;li&gt;Be wary of the cost of building the wrong abstraction. The cost to dismantle it and replace will be much more expensive than deferring it and when there is better context.&lt;/li&gt;
&lt;li&gt;If a shortcut is used intentionally, call it out with the rest of your team. Use comments in the code to let other developers know about the context and how you think this might need to change.&lt;/li&gt;
&lt;li&gt;As the related feature evolves, evaluate whether it is time to put in a proper abstraction.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cost_of_delay&quot;&gt;Cost of delay&lt;/a&gt; is a great measure to priotize work.&lt;/li&gt;
&lt;li&gt;Teams must have technical leaders who are able to think at a system level and consider these tradeoffs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dependency Upgrade Debt&lt;/h3&gt;
&lt;p&gt;Code doesn’t exist in isolation. Any non-trivial software application will have many many third party libraries and packages they depend on to build the software.&lt;/p&gt;
&lt;p&gt;This is everything from the language version, to application framework version and other libraries used to accomplish specific tasks. And, each of them are also evolving over time just like your software.&lt;/p&gt;
&lt;p&gt;This tends to be one of the most overlooked aspect of tech debt.
But the cost can be crippling especially for an application built on a dynamic language like Ruby and Python AND with low test coverage - where it is much harder to upgrade the language version and the application framework. Upgrades like Python 2 to 3 where there are a lot of breaking features is a nightmare.&lt;/p&gt;
&lt;p&gt;In the Java world also, the 6 month release cadence has meant faster rollout of new features and shorter end of life cycles for support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dependency upgrade debt is the cost you have to pay for not upgrading your dependency version periodically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Cost of dependency upgrade debt&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Much bigger risk and effort to upgrade when the version distance is high.&lt;/li&gt;
&lt;li&gt;Online community support for older package version dwindles the older it gets. Consider React Native. A lot of issues on their Github and Stackoverflow are so dependent on the version of the framework that if you have to overcome an issue that you are facing, it means you have to upgrade to a more recent version to even report the issue and get help.&lt;/li&gt;
&lt;li&gt;Older version API documentation might be discared. And with that you might even lose the documentation required to migrate from your current version to the next version incrementally.&lt;/li&gt;
&lt;li&gt;Miss out on bug fixes, new features, performance improvements, security vulnerability fixes.&lt;/li&gt;
&lt;li&gt;Risk of forced upgrade at the worst possible time. Consider, you run into a major performance issue that is getting a lot of customer tickets and you trace this to a dependency that hasn’t been updated for many years. You discover that the issue has been on a new major version of the software. &lt;/li&gt;
&lt;li&gt;Inability to upgrade one package for a feature because it needs a higher version of another package. e.g. a lot of Django packages are compatible with the specific version of Django and you can’t upgrade a package without upgrading Django itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tackling Dependency Upgrade Debt&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Review dependency upgrades periodically - atleast once in a quarter and create action items.&lt;/li&gt;
&lt;li&gt;Use tools like &lt;a href=&quot;https://dependabot.com/&quot;&gt;dependabot&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Keep the team aware of new releases in core packages by subscribing to RSS feeds in your Slack channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Infrastructure Upgrades&lt;/h3&gt;
&lt;h3&gt;Security Threats&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Lessons from a Tennis Class]]></title><description><![CDATA[A recent experience as a student of tennis brought some perspectives on mentoring and what it feels like to be a student again.]]></description><link>https://lumen.netlify.com/posts/tennis-lessons</link><guid isPermaLink="false">https://lumen.netlify.com/posts/tennis-lessons</guid><pubDate>Mon, 21 Oct 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;I started playing Tennis under a coach recently. I had donned a coachee role after a long time and one of the first things that came to mind when it started was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The coach makes such a big difference. The individual attention and personal feedback and suggestions are helping immensely. Why don’t we have a coach for professional work?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The ‘coachee’ experience triggered some perspectives:&lt;/p&gt;
&lt;p&gt;It was a humbling (and fumbling) experience taking the first steps to a game I hadn’t played before. I really appreciated the patience shown by the coaches to correct the mistakes step by step until a stroke was improved.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is easy to forget how difficult it was the first time once you gain a lot of experience and not show the same empathy when you become a mentor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The coach seemed to know that you should not overwhelm someone with too much feedback and gave it incrementally and at the right time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a lead or mentor, it is our job is to give feedback to help someone improve. But the timing and tone are as important as the objectivity of the feedback.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The junior coach would sometimes keep repeating the same feedback to no avail at times — “bend your knees or turn your upper body more to play a shot. You need to get into position quickly so that you have enough time. You need to improve footwork”. The senior coach would watch and later prescribe warm-up routines and stretches to enhance flexibility and footwork or improve stamina.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a mentor, you need to listen carefully and look at things from the perspective of the mentee — only then can you connect to the root cause and solve the problem effectively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a beginner in the game, I would initially try to quickly wrap up warm-up exercises so I could get to the court and start playing. However, I would notice senior players who would do 1 hour of intensive warm-up and exercise before even picking up the racquet. And when you saw them playing in the court later, it was clear why that prep work is essential.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Foundations matter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;True learning is not just about learning the latest cool framework but also having a deep understanding of how things work and the basics like data structures, algorithms, compiler construction — We might not need this 90% of the time but that 10% use case where you have to build an abstraction, these foundational skills make a huge difference.
I later remembered this article I had read many years back — &lt;a href=&quot;https://www.newyorker.com/magazine/2011/10/03/personal-best&quot;&gt;“Top athletes and singers have coaches. Should you?”&lt;/a&gt; by Atul Gawande.&lt;/p&gt;
&lt;p&gt;Now, a personal coach in the professional realm in software engineering might be a tall order. But luckily in this field, there are several ways one can get guidance when you cannot arrange a personal coach.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pair program with seniors in the team or company&lt;/li&gt;
&lt;li&gt;If your company has a mentorship program, take advantage of it and meet your mentor every month to discuss&lt;/li&gt;
&lt;li&gt;Read code from top quality open source projects. Contribute to open-source projects that you are interested in&lt;/li&gt;
&lt;li&gt;Follow experts in the area of your interest on Twitter — keep abreast of emerging trends&lt;/li&gt;
&lt;li&gt;Read foundational books — there are enough essential reading lists out there.&lt;/li&gt;
&lt;li&gt;Get online training — egghead, purelyfunctional.tv— lots of online classes where you can also interact with the trainer.&lt;/li&gt;
&lt;li&gt;Attend conferences, build a network of people you can rely on when in doubt.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[In Praise Of Angular 2]]></title><description><![CDATA[Angular is a great improvement over AngularJS and can be a great choice for building single page apps, if you want a batteries included framework.]]></description><link>https://lumen.netlify.com/posts/in-praise-of-angular</link><guid isPermaLink="false">https://lumen.netlify.com/posts/in-praise-of-angular</guid><pubDate>Sat, 11 Mar 2017 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;At my startup, our core application is built on AngularJS (1.x) and it was chosen for various reasons at that time. However, when there was a need to build additional applications last December, I was sure that I didn’t want to use Angular 1.x for those — mainly because it wasn’t satisfying nor fun to work on it especially with new and better alternatives like React and Angular 2 becoming mature.
I chose Angular 2 and I couldn’t be happier.&lt;/p&gt;
&lt;h3&gt;Choosing Angular 2 vs React&lt;/h3&gt;
&lt;p&gt;For me, it eventually came down to choosing an end to end framework that provides all the functionalities required for a Single Page App versus choosing a library that builds views and leaving a lot of open decisions to make on view routing, an http service, architectural pattern, a build tool and others.
While the latter was tempting because it would have been fun to explore and choose different tools for each purpose, being in a lean start-up didn’t afford that option and we chose Angular 2 and a few months down the line, I couldn’t be happier with the choice.&lt;/p&gt;
&lt;h3&gt;Feels a lot like AngularJS but 10x better&lt;/h3&gt;
&lt;p&gt;At a first glance, Angular 2 is bound to feel alien with the annotation heavy declarations and TypeScript syntax but play with it a little and if you have worked with Angular 1.x, you will soon relate to the same patterns like directives, HTML templates, dependency injection etc and ramp up pretty quickly. The egghead tutorial on Angular2 fundamentals really helped too.&lt;/p&gt;
&lt;h2&gt;What makes it 10x better?&lt;/h2&gt;
&lt;h3&gt;Component driven design&lt;/h3&gt;
&lt;p&gt;With AngularJS, directives were the way to component-ize views so that they are modular for better organization, readability and reusability. However, the tendency in AngularJS was always to have fat Ng Controllers. With Angular 2, components (essentially directives) are the primary building blocks and there is no choice between an ng include controller or directives leading to a consistent pattern that is encouraged by the framework. In effect this led to much better modularity in the codebase.
State propagation is also much cleaner and explicit — where instead of using two-way binding of AngularJS, you use what is called as Event Emitters to signal state changes. Event Emitters and the Angular 2 http service use RxJS Observables which is a great fit!&lt;/p&gt;
&lt;h3&gt;Angular CLI&lt;/h3&gt;
&lt;p&gt;If there was one thing that quickly pulled me into Angular 2 when I was just trying it, it was the Angular CLI which makes it super easy to get started building Angular apps. Angular CLI takes away all the chores you would have to do building a single page app — project skeleton set up, test framework setup (unit test and e2e), build set up, minification, environment configuration — so that you can focus on building features. The CLI uses webpack under the hood and if you want more control, you can always eject out of the CLI and use webpack directly — although I haven’t had to do this yet.&lt;/p&gt;
&lt;h3&gt;TypeScript&lt;/h3&gt;
&lt;p&gt;Using typed Javascript is a joy on great IDE. Refactoring support, auto-complete features are much better with the type information but more importantly, using types enhances readability and the maintainability of the code. I have found myself diving into a codebase after a gap and found it at home primarily because the data structures were explicit. And TypeScript being a superset of JS, there isn’t a steep curve either and you can learn and discover things as you go.&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;Angular 2 was designed to be mobile friendly and as such is faster than Angular 1.x and with AOT, it is a lot faster now with very little perceptible lag for initial rendering.&lt;/p&gt;
&lt;h3&gt;Angular Universal&lt;/h3&gt;
&lt;p&gt;Server side rendering is still a thing if you to be friendly to Search Engines and Angular Universal framework makes it possible to set up pre-rendering pretty quickly. I haven’t used this so far but intend to soon.&lt;/p&gt;
&lt;p&gt;In short, Angular 2 is a significant improvement on AngularJS and is a great option if you just want to run with an opinionated end to end framework.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Baking In Configurability - Product Rewrite Story - Part 2]]></title><description><![CDATA[A real world blog series on a do-or-die product rewrite engagement from the trenches. This part talks about how we addressed the requirements of configurability and extensibility in the core of the platform.]]></description><link>https://lumen.netlify.com/posts/product-rewrite-story-part-2</link><guid isPermaLink="false">https://lumen.netlify.com/posts/product-rewrite-story-part-2</guid><pubDate>Mon, 25 Jul 2016 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;A multi-tenant financial product that we were building needed to be highly configurable and extensible.
Read more on how we &lt;a href=&quot;https://www.sahajsoft.com/blog/product-rewrite-story-part-2/&quot;&gt;baked in configurability at the heart of that platform&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Innovate or Perish - Product Rewrite Story - Part 1]]></title><description><![CDATA[A real world blog series on a do-or-die product rewrite engagement from the trenches.]]></description><link>https://lumen.netlify.com/posts/product-rewrite-story-part-1</link><guid isPermaLink="false">https://lumen.netlify.com/posts/product-rewrite-story-part-1</guid><pubDate>Tue, 12 Jul 2016 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;It is great when products reach product market fit but if their architecture doesn’t enable them to onboard and service customers effectively, those companies will not able to scale their business beyond the few handful customers.&lt;/p&gt;
&lt;p&gt;Sometimes, a rewrite of the core product is called for to accomodate the business requirements from a fresh perspective.
In such cases, the technical effort is akin to replacing the engine of a airplane in flight, because neither the customers nor the competition is waiting for you to catch up.&lt;/p&gt;
&lt;p&gt;Read more on the experience working on such an effort on the &lt;a href=&quot;https://www.sahajsoft.com/blog/product-rewrite-story-part-1/&quot;&gt;Sahaj engineering blog&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Architecting For Continuous Delivery]]></title><description><![CDATA[Continuous Delivery is not just about selecting the right tools. The application should also be architected in a way to make it effective.]]></description><link>https://lumen.netlify.com/posts/architecting-for-continuous-delivery</link><guid isPermaLink="false">https://lumen.netlify.com/posts/architecting-for-continuous-delivery</guid><pubDate>Fri, 20 Nov 2015 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;This is my post on ThoughtWorks Insights on &lt;a href=&quot;https://www.thoughtworks.com/insights/blog/architecting-continuous-delivery&quot;&gt;Architecting for Continuous Delivery&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;[Best of 2016] What is the real essence of &lt;a href=&quot;https://twitter.com/hashtag/ContinuousDelivery?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#ContinuousDelivery&lt;/a&gt;? &lt;a href=&quot;https://twitter.com/vishalmanohar?ref_src=twsrc%5Etfw&quot;&gt;@vishalmanohar&lt;/a&gt; explains here &lt;a href=&quot;https://t.co/RWkR6BUlYA&quot;&gt;https://t.co/RWkR6BUlYA&lt;/a&gt; &lt;a href=&quot;https://t.co/IZQxZWM1dI&quot;&gt;pic.twitter.com/IZQxZWM1dI&lt;/a&gt;&lt;/p&gt;&amp;mdash; ThoughtWorks (@thoughtworks) &lt;a href=&quot;https://twitter.com/thoughtworks/status/814216608096854016?ref_src=twsrc%5Etfw&quot;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Trunk Based Development With Deployment Pipelines]]></title><description><![CDATA[The popular 'Gitflow' branching model causes more harm than good. How can we effectively develop and deploy software with confidence?]]></description><link>https://lumen.netlify.com/posts/trunk-based-dev-with-deployment-pipelines</link><guid isPermaLink="false">https://lumen.netlify.com/posts/trunk-based-dev-with-deployment-pipelines</guid><pubDate>Mon, 19 Oct 2015 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;This is my post on ThoughtWorks Insights on &lt;a href=&quot;https://thoughtworks.com/insights/blog/enabling-trunk-based-development-deployment-pipelines&quot;&gt;Enabling Trunk Based Developement With Deployment Pipelines&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Enabling Trunk Based Development with Deployment Pipelines &lt;a href=&quot;https://twitter.com/snap_ci?ref_src=twsrc%5Etfw&quot;&gt;@snap_ci&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/ContinuousDelivery?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#ContinuousDelivery&lt;/a&gt; &lt;a href=&quot;https://t.co/Bxe4dtuiWD&quot;&gt;https://t.co/Bxe4dtuiWD&lt;/a&gt; &lt;a href=&quot;https://t.co/9MNIiOa2T1&quot;&gt;pic.twitter.com/9MNIiOa2T1&lt;/a&gt;&lt;/p&gt;&amp;mdash; ThoughtWorks (@thoughtworks) &lt;a href=&quot;https://twitter.com/thoughtworks/status/656651115916726272?ref_src=twsrc%5Etfw&quot;&gt;October 21, 2015&lt;/a&gt;&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Architecture In The Age Of Agile]]></title><description><![CDATA[Does agile software development mean you don't do any upfront architecture?]]></description><link>https://lumen.netlify.com/posts/agile-software-design</link><guid isPermaLink="false">https://lumen.netlify.com/posts/agile-software-design</guid><pubDate>Tue, 12 May 2015 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;One of the things that I try to keep in mind while working on code is &lt;a href=&quot;http://martinfowler.com/bliki/PairProgrammingMisconceptions.html&quot;&gt;this quote by Martin Fowler&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I’m writing boring repetitive code it’s usually a sign that I’ve missed an important abstraction, one that will drastically reduce the amount of rote code to write&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Agile, you work in small iterations (week or two weeks at the most) and developers tend to work on work on different parts of the application and diverse features almost every day (pair rotation). So, unless there is a constant reflection of what you are doing, it is easy to miss the forest for the trees, or in our case the important abstractions that can solve a whole class of problems efficiently.&lt;/p&gt;
&lt;p&gt;A lot of the code level abstractions like say, validation framework or error handling etc. would be naturally implemented while working on code but it can be difficult to identify high level abstractions when you are knee deep into a specific problem and it is much more efficient to identify them ahead of time.&lt;/p&gt;
&lt;p&gt;For instance, for an application that needs to build adapters to various gateways like MQ, FTP, filesystem, email, etc. can we consider integration frameworks like Apache Camel or Spring?&lt;/p&gt;
&lt;p&gt;Or, if you are building a CRUD interface, is it possible to build a generic solution using a meta-model approach like &lt;a href=&quot;https://www.playframework.com/documentation/1.2.3/crud&quot;&gt;this&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;So, while Agile development eschews big up-front design it is still important to have a high level design in mind with the difference being that in Agile, the plans are not set in stone and can evolve based on changing scope and new learnings.  This &lt;a href=&quot;http://www.infoq.com/news/2010/05/agile-architecture-partnership&quot;&gt;article&lt;/a&gt; delves into the inherent tension between agility and upfront planning and design.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Monolith to Microservices]]></title><description><![CDATA[Reflections on a re-architecutre from monolithic app to microservices]]></description><link>https://lumen.netlify.com/posts/monolith-to-microservices</link><guid isPermaLink="false">https://lumen.netlify.com/posts/monolith-to-microservices</guid><pubDate>Mon, 06 Apr 2015 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;I was reading Building Microservices recently and couldn’t help but draw parallels to a recent project where we had to work on a monolithic application that ultimately evolved into multiple mini applications that allowed different teams to independently deploy their apps. &lt;/p&gt;
&lt;h3&gt;Single team, Large codebase&lt;/h3&gt;
&lt;p&gt;When we started out it was a single large team of atleast 10 dev pairs working off a monolithic code base but different isolated features of the application. While being a single team affords a lot of benefits like easier communication, keeping everybody in sync, better rotation and skill mix, it doesn’t work very well especially for junior members in the team who will find it difficult to focus when they have work on different parts of the application on a continuous basis. This negatively effects code ownership and motivation. I initially didn’t think splitting into smaller teams was a good idea mostly because I thought it would add a lot of communication overhead, hamper cross pollination etc. but now, I think doing so was critical for project delivery, team happiness and code quality.&lt;/p&gt;
&lt;p&gt;Of course, identifying the seams to divide the teams along, team mix etc. are all important factors to consider before dividing teams. Having the separate teams in the same location, common project showcase meetings and tech huddles should help keep everybody across teams aligned in the larger direction.&lt;/p&gt;
&lt;h3&gt;Smaller teams, separate codebases&lt;/h3&gt;
&lt;p&gt;Splitting into smaller teams helped in lot of  ways but every team working on the monolith code base still had some critical problems: &lt;/p&gt;
&lt;p&gt;Ownership of overall application code was not clear.
Difficult to reason about code in large code bases
Different coding patterns emerged in each team and it was difficult to consolidate
Builds were slow with the large code base, more tests etc.
A broken build would block every team
A large automated functional test suite that was ignored because of lack of ownership&lt;/p&gt;
&lt;p&gt;These are typical issues with large monolithic codebases and a side effect of Conway’s Law.&lt;/p&gt;
&lt;p&gt;Splitting the monolith into smaller independent code bases along functional lines and team structure helped a great deal. We then had a much smaller code base to reason about, much faster builds, test pipelines that were specific to what the team was building and a consistent coding style within the same codebase.&lt;/p&gt;
&lt;h3&gt;Microservices&lt;/h3&gt;
&lt;p&gt;Although we had split the codebase along the lines of a team, the deployment of these modules were still as part of the monolithic application. This coupled the release of team specific features with that of the monolith and still retained a significant overhead in deploying software because you need all these different teams to coordinate and sign off on a build and deploy it.&lt;/p&gt;
&lt;p&gt;While a lot of focus in adoption of CD is lent towards Dev Ops automation, I think having a modular architecture with independently deployable software units is the most important piece because without this you are still stuck with all the  testing and coordination overhead required to deploy the monolith.&lt;/p&gt;
&lt;p&gt;Dividing the monolithic app into smaller independently deployable mini-apps (fashionably called Microservices) helped address this.&lt;/p&gt;
&lt;p&gt;Teams now have autonomy on releasing software features without being coupled to any other team and have better ownership of their features.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Better Ingredients, Better Software]]></title><description><![CDATA[Fresh perspectives on SW dev from ThoughtWorks]]></description><link>https://lumen.netlify.com/posts/better-ingredients-better-software</link><guid isPermaLink="false">https://lumen.netlify.com/posts/better-ingredients-better-software</guid><pubDate>Sat, 18 May 2013 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;Since joining TW (some 18 months now), I have been wanting to write on the key software dev practices that stood out from my previous work places. Here you go:&lt;/p&gt;
&lt;h3&gt;Relentlessly automate every bit of drudgery&lt;/h3&gt;
&lt;p&gt;Everywhere else I have worked, there is not a lot of attention to be productive at work. It might appear self serving in time and material projects but the real reason is that there is a lack of introspection to see how to build effective software development practices. &lt;/p&gt;
&lt;p&gt;Investments in continuos integration, automated database migration, functional test automation, push button deployment pay off in compound interest.&lt;/p&gt;
&lt;h3&gt;Self Organizing Teams versus Command and Control&lt;/h3&gt;
&lt;p&gt;As Paul Graham writes, “You weren’t meant to have a boss”.
When everybody in the team know that they can influence a decision, and the best idea will win, everybody feels like they have a stake which is so empowering and motivating. Compare this to a job where the programmer has to simply translate a low level design document and is rewarded for conforming and not asking questions. Inevitably, the measure becomes on terms of Lines of Code or Number of Bugs Fixed per day.  &lt;/p&gt;
&lt;p&gt;Stand Ups, Team Retrospectives, Iteration planning meetings, each of these practices have their role in dismantling “command centers” if and when they creep up, even in flat structures.&lt;/p&gt;
&lt;h3&gt;Agile&lt;/h3&gt;
&lt;p&gt;I think almost all Waterfall projects that I worked on fell short on one parameter or the other - Quality, Timeliness, Cost, UX. The ones that didn’t, were the ones where we had a very capable client side Product Manager who worked closely with the team.&lt;/p&gt;
&lt;p&gt;Customer collaboration is the key in ensuring that we deliver the product that the customer wants versus what we think the customer wants. Showcasing to customer frequently and getting feedback, dividing big requirements into smaller “stories”, all these help to stay on track.&lt;/p&gt;
&lt;p&gt;Of course, all these things require an all-round, competent, multi-disciplinarian team to make it work and probably works best in smaller teams.&lt;/p&gt;
&lt;h3&gt;No Broken Windows&lt;/h3&gt;
&lt;p&gt;I have seen a lot of terrible code in the previous IT companies where most projects are won on price factors and this puts a lot of pressure during project delivery because the project cannot afford to bring in experienced developers. New developers starting their careers don’t have much to look up to and the code quality spirals downwards thanks to the Broken Windows Effect. The low margins also mean that the focus is to somehow get the project completed without thinking about code quality.&lt;/p&gt;
&lt;p&gt;Having a maniacal focus on code quality, metrics integrated with CI, pairing, pair rotation etc. helps avoid this pitfall. Therefore, although the early milestones appear to have low velocity but the later releases will certainly be faster and on a strong foundation.&lt;/p&gt;</content:encoded></item></channel></rss>